
package tss.actividad3.GUI;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VentanaEjercicio3 extends javax.swing.JPanel {

    public VentanaEjercicio3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textSemanas = new javax.swing.JTextField();
        btnInsertarVentas = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnTablaCalentadores = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        textTotal = new javax.swing.JTextField();
        btnCalcularProb = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaProbabilidad = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDistribuciones = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        btnEjemplo = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textVentas = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textConclusiones = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnEvaluar = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        campoNumeroAleatorio = new javax.swing.JTextField();
        btnIngresarNroAleatorio = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        campoCantidadAleatorios = new javax.swing.JTextField();
        btnIngresarCantidad = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        limpiarTablaSimulacion = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnInventario = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane6.setViewportView(jTextArea1);

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setText("EJERCICIO 3 - AGENCIAS GENERALES - INVENTARIOS");

        jLabel6.setText("Nro de semanas de Venta:");

        btnInsertarVentas.setText("Insertar");
        btnInsertarVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarVentasActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Venta de calentadores:");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        btnTablaCalentadores.setText("Calcular");
        btnTablaCalentadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaCalentadoresActionPerformed(evt);
            }
        });

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ventas por semana", "Nro de semanas que se vendio"
            }
        ));
        jScrollPane3.setViewportView(tablaVentas);

        jLabel2.setText("Total:");

        textTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTotalActionPerformed(evt);
            }
        });

        btnCalcularProb.setText("Calcular Probabilidad");
        btnCalcularProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularProbActionPerformed(evt);
            }
        });

        tablaProbabilidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad"
            }
        ));
        jScrollPane2.setViewportView(tablaProbabilidad);

        tablaDistribuciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad", "Distr. Acumulada", "Rango Inferior", "Rango Superior", "Venta de Calentadores"
            }
        ));
        jScrollPane1.setViewportView(tablaDistribuciones);

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero de semanas", "Nro Aleatorio", "Venta de Calentadores"
            }
        ));
        jScrollPane4.setViewportView(tablaFinal);

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        jLabel11.setText("-------------------------------------------------");

        jLabel4.setText("Ventas por semana:");

        jLabel10.setText("-------------------------------------------------");

        jLabel3.setText("Tabla venta de calentadores:");

        textConclusiones.setColumns(20);
        textConclusiones.setRows(5);
        jScrollPane7.setViewportView(textConclusiones);

        jLabel1.setText("Conclusiones:");

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });

        jLabel16.setText("--------------------------1----------------------");

        jLabel8.setText("Ingresar numeros aleatorios: ");

        campoNumeroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNumeroAleatorioActionPerformed(evt);
            }
        });

        btnIngresarNroAleatorio.setText("Ingresar");
        btnIngresarNroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarNroAleatorioActionPerformed(evt);
            }
        });

        jLabel12.setText("--------------------------2----------------------");

        jLabel9.setText("Generar numeros Aleatorios:");

        jLabel13.setText("Ingrese cantidad:");

        btnIngresarCantidad.setText("Generar");
        btnIngresarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCantidadActionPerformed(evt);
            }
        });

        jLabel14.setText("TABLA DE SIMULACION");

        limpiarTablaSimulacion.setText("Limpiar tabla de simulacion");
        limpiarTablaSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaSimulacionActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Vaciar Todo");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel15.setText("Inventario:");

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(textVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(btnEjemplo)
                                    .addComponent(jLabel6)
                                    .addComponent(textSemanas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(btnTablaCalentadores))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(btnInsertarVentas))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnIngresarNroAleatorio))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnIngresarCantidad)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(campoCantidadAleatorios))
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(btnLimpiar)))
                        .addGap(40, 40, 40)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCalcularProb))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnEvaluar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(btnInventario)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(limpiarTablaSimulacion))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel7)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnEjemplo))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)))
                .addGap(1, 1, 1)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnCalcularProb))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEvaluar)
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(limpiarTablaSimulacion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textSemanas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(btnInsertarVentas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTablaCalentadores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresarNroAleatorio))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(4, 4, 4)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(campoCantidadAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(btnIngresarCantidad)
                        .addGap(35, 35, 35)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(PanelEjercicio1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarVentasActionPerformed
        try{
            int ventasPorSemana = Integer.valueOf(textVentas.getText());
            int semanasEnVenta = Integer.valueOf(textSemanas.getText());
            int totalSemanas = semanasEnVenta;

            DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
            
            int rowCount = model.getRowCount();
            if (rowCount > 0) {

                int anteriorsemanasEnVenta = (int) model.getValueAt(rowCount - 1, 1);
                totalSemanas = totalSemanas+anteriorsemanasEnVenta;
                
            }
            
            model.addRow(new Object[]{ventasPorSemana,semanasEnVenta});
            textTotal.setText(String.valueOf(totalSemanas));
            textVentas.setText("");
            textSemanas.setText("");
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertarVentasActionPerformed

    private void btnTablaCalentadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaCalentadoresActionPerformed
           
        
            double distribucionAcum = 0.0;
            double probabilidad = 0.0;
            int vendidos = 0;
            
            DefaultTableModel modelVentas = (DefaultTableModel) tablaVentas.getModel();
            DefaultTableModel modelProb = (DefaultTableModel) tablaProbabilidad.getModel();
            DefaultTableModel model = (DefaultTableModel) tablaDistribuciones.getModel();
            
            int ventasCalentadores = (Integer) modelVentas.getValueAt(0, 0);
            double prob = (Double) modelProb.getValueAt(0, 0);
            distribucionAcum = prob;
                    
            double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
            double rangoSuperior = prob;
            model.addRow(new Object[]{prob,distribucionAcum, rangoInferior, rangoSuperior, ventasCalentadores});

            int rowCount = modelProb.getRowCount();
            for (int i = 1; i < rowCount; i++) {
                if (rowCount > 0) {
                    prob = (Double) modelProb.getValueAt(i, 0);
                    
                    double anteriorAcum = (double) model.getValueAt(i - 1, 1);
                    double rangoSuperiorAnterior = (double) model.getValueAt(i - 1, 3);
                    ventasCalentadores = (Integer) modelVentas.getValueAt(i, 0);
                    
                    rangoInferior = rangoSuperiorAnterior;
                    distribucionAcum = anteriorAcum + prob;
                    rangoSuperior = distribucionAcum;
                    
                    prob = Math.round(prob * 100.0) / 100.0;
                    distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
                    rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
                    rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

                    model.addRow(new Object[]{prob,distribucionAcum, rangoInferior, rangoSuperior, ventasCalentadores});
                }
            }
            
        
    }//GEN-LAST:event_btnTablaCalentadoresActionPerformed

    private void textTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTotalActionPerformed

    private void btnCalcularProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularProbActionPerformed
        int obtenerProb = Integer.valueOf(textTotal.getText());
        DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
        DefaultTableModel modelProb = (DefaultTableModel) tablaProbabilidad.getModel();
        double prob = 0.0;
        
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            int nroSemana = (Integer) model.getValueAt(i, 1);
            prob = nroSemana / (double)obtenerProb;
            
            prob = Math.round(prob * 100.0) / 100.0;
            
            modelProb.addRow(new Object[]{prob});
            
        }
        
    }//GEN-LAST:event_btnCalcularProbActionPerformed

    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        DefaultTableModel modelVentas = (DefaultTableModel) tablaVentas.getModel();
        DefaultTableModel modelProbabilidades = (DefaultTableModel) tablaProbabilidad.getModel();
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        modelVentas.setRowCount(0);
        modelProbabilidades.setRowCount(0);
        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);
        
        Object[][] datosVentas = {
            {4, 6},
            {5, 5},
            {6, 9},
            {7, 12},
            {8, 8},
            {9, 7},
            {10, 3},
        };

        for (Object[] fila : datosVentas) {
            modelVentas.addRow(fila);
        }
        
        Object[][] datosProbablidades = {
            {0.12},
            {0.1},
            {0.18},
            {0.24},
            {0.16},
            {0.14},
            {0.06},
        };

        for (Object[] fila : datosProbablidades) {
            modelProbabilidades.addRow(fila);
        }
        textTotal.setText("50");

        // Agregar datos predefinidos a tablaDistribuciones
        Object[][] datosDistribucion = {
            {0.12, 0.12, 0.00, 0.12, 4},
            {0.10, 0.22, 0.12, 0.22, 5},
            {0.18, 0.40, 0.22, 0.40, 6},
            {0.24, 0.64, 0.40, 0.64, 7},
            {0.16, 0.80, 0.64, 0.80, 8},
            {0.14, 0.94, 0.80, 0.94, 9},
            {0.06, 1.00, 0.94, 1.00, 10},
        };

        for (Object[] fila : datosDistribucion) {
            modelDistribuciones.addRow(fila);
        }

        // Datos de números aleatorios predefinidos
        double[] numerosAleatorios = {0.10, 0.24, 0.03, 0.32, 0.23, 0.59, 0.95, 0.34, 0.34, 0.51, 0.08, 0.48, 0.66, 0.97, 0.03, 0.96, 0.46, 0.74, 0.77, 0.44};

        // Procesar los números aleatorios y asignarles demanda según la tabla de distribuciones
        for (int i = 0; i < numerosAleatorios.length; i++) {
            double numAleatorio = numerosAleatorios[i];
            int ventacal = 0;

            // Buscar el color en base al rango
            for (int j = 0; j < modelDistribuciones.getRowCount(); j++) {
                double rangoInferior = (double) modelDistribuciones.getValueAt(j, 2);
                double rangoSuperior = (double) modelDistribuciones.getValueAt(j, 3);
                int ventaCaletadores = (Integer) modelDistribuciones.getValueAt(j, 4);

                if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                    ventacal = ventaCaletadores;
                    break;
                }
            }

            // Agregar fila a tablaFinal
            modelFinal.addRow(new Object[]{i + 1, numAleatorio, ventacal});
        }
    }//GEN-LAST:event_btnEjemploActionPerformed

    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        try {
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();

        int rowCountFinal = modelFinal.getRowCount();
        int rowCountDistribuciones = modelDistribuciones.getRowCount();
        
        if (rowCountFinal == 0 || rowCountDistribuciones == 0) {
            textConclusiones.setText("Las tablas están vacías.");
            return;
        }

        // Obtener valor de btnInventario
        int inventario = Integer.parseInt(btnInventario.getText());

        StringBuilder resultado = new StringBuilder();
        
        // 1. Valores de la tercera fila mayores a btnInventario con su número de semana
        resultado.append("Valores mayores a ").append(inventario).append(":\n");
        for (int i = 0; i < rowCountFinal; i++) {
            int semana = (int) modelFinal.getValueAt(i, 0);
            int valor = (int) modelFinal.getValueAt(i, 2);
            if (valor > inventario) {
                resultado.append("Semana ").append(semana).append(" de valor: ").append(valor).append("\n");
            }
        }
        
        // 2. Total de la tercera fila dividido por la primera fila
        int totalTerceraFila = 0;
        int totalPrimeraFila = rowCountFinal;
        for (int i = 0; i < rowCountFinal; i++) {
            totalTerceraFila += (int) modelFinal.getValueAt(i, 2);
        }
        double division = (double) totalTerceraFila / totalPrimeraFila;
        resultado.append("\nVenta Promedio: ").append(String.format("%.2f", division)).append(" calentadores/semana").append("\n");

        // 3. Sumatoria de (primera fila * última fila de tabla distribuciones)
        double sumatoria = 0.0;
        for (int i = 0; i < rowCountDistribuciones; i++) {
            double primeraFila = (double)modelDistribuciones.getValueAt(i, 0);
            int ultimaFilaDistribuciones = (int) modelDistribuciones.getValueAt(i, 4);
            sumatoria += primeraFila * ultimaFilaDistribuciones;
        }
        sumatoria = Math.round(sumatoria * 100.0) / 100.0;
        resultado.append("\nNumero esperado de ventas por semana : ").append(sumatoria).append(" calentadores/semana");

        // Mostrar resultados en el textArea
        textConclusiones.setText(resultado.toString());

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese un número válido en el campo de inventario.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEvaluarActionPerformed

    private void campoNumeroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNumeroAleatorioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNumeroAleatorioActionPerformed

    private void btnIngresarNroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarNroAleatorioActionPerformed
        try {
            // Obtener los valores de los campos y validarlos
            String textoNumeroAleatorio = campoNumeroAleatorio.getText().trim();

            // Validar que los campos no estén vacíos
            if (textoNumeroAleatorio.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si hay algún campo vacío
            }

            // Convertir los valores a números
            double numAleatorio = Double.parseDouble(textoNumeroAleatorio);
            int ventaCalentadores = 0;
            int numero = 1;

            DefaultTableModel model = (DefaultTableModel) tablaFinal.getModel();
            DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();

            int rowCount = model.getRowCount();
            if (rowCount > 0) {
                numero = rowCount + 1;
            }

            // Recorrer la tabla de distribuciones para encontrar la demanda correspondiente
            for (int i = 0; i < modelDistribuciones.getRowCount(); i++) {
                double rangoInferior = (double) modelDistribuciones.getValueAt(i, 2);
                double rangoSuperior = (double) modelDistribuciones.getValueAt(i, 3);
                Integer ventas = (Integer) modelDistribuciones.getValueAt(i, 4);

                if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                    
                    ventaCalentadores = ventas;
                    break; // Detenerse cuando encuentra el valor correspondiente
                }
            }

            // Agregar los datos a la tabla
            model.addRow(new Object[]{numero, numAleatorio, ventaCalentadores}); // Convertir ganancia a entero

            // Limpiar el campo después de agregar
            campoNumeroAleatorio.setText("");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarNroAleatorioActionPerformed

    private void btnIngresarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCantidadActionPerformed
        try {
            int cantidadAleatorios = Integer.parseInt(campoCantidadAleatorios.getText()); // Obtener la cantidad ingresada
            DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
            DefaultTableModel modelDistribucion = (DefaultTableModel) tablaDistribuciones.getModel();
            double ganancia = 0.0;
            int ventaCalentadores = 0;

            for (int i = 0; i < cantidadAleatorios; i++) {
                double numAleatorio = Math.round(Math.random() * 100.0) / 100.0; // Generar número aleatorio entre 0 y 1 con 2 decimales
                

                // Buscar la demanda correspondiente en la tablaDistribuciones
                for (int j = 0; j < modelDistribucion.getRowCount(); j++) {
                    double rangoInferior = (double) modelDistribucion.getValueAt(j, 2);
                    double rangoSuperior = (double) modelDistribucion.getValueAt(j, 3);
                    int ventas = (Integer) modelDistribucion.getValueAt(j, 4);
                    
                    if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                        ventaCalentadores = ventas;
                        break; // Terminar la búsqueda cuando encuentre la demanda
                    }
                }

                // Agregar la fila a la tablaFinal
                modelFinal.addRow(new Object[]{i + 1, numAleatorio, ventaCalentadores});
            }

            campoCantidadAleatorios.setText(""); // Limpiar el campo de entrada
            

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarCantidadActionPerformed

    private void limpiarTablaSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaSimulacionActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelProb = (DefaultTableModel) tablaProbabilidad.getModel();
        modelFinal.setRowCount(0);
        modelDistribuciones.setRowCount(0);
        modelProb.setRowCount(0);
    }//GEN-LAST:event_limpiarTablaSimulacionActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelVentas = (DefaultTableModel) tablaVentas.getModel();
        DefaultTableModel modelProb = (DefaultTableModel) tablaProbabilidad.getModel();

        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);
        modelVentas.setRowCount(0);
        modelProb.setRowCount(0);

    }//GEN-LAST:event_btnLimpiarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JButton btnCalcularProb;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnIngresarCantidad;
    private javax.swing.JButton btnIngresarNroAleatorio;
    private javax.swing.JButton btnInsertarVentas;
    private javax.swing.JTextField btnInventario;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnTablaCalentadores;
    private javax.swing.JTextField campoCantidadAleatorios;
    private javax.swing.JTextField campoNumeroAleatorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton limpiarTablaSimulacion;
    private javax.swing.JTable tablaDistribuciones;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTable tablaProbabilidad;
    private javax.swing.JTable tablaVentas;
    private javax.swing.JTextArea textConclusiones;
    private javax.swing.JTextField textSemanas;
    private javax.swing.JTextField textTotal;
    private javax.swing.JTextField textVentas;
    // End of variables declaration//GEN-END:variables
}
