
package tss.actividad3.GUI;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VentanaEjercicio5 extends javax.swing.JPanel {

    public VentanaEjercicio5() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDistribuciones = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        campoProbabilidad = new javax.swing.JTextField();
        campoVendidos = new javax.swing.JTextField();
        btnIngresarDistribucion = new javax.swing.JButton();
        btnEjemplo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        limpiarTablaSimulacion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnEvaluar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campoNumeroAleatorio = new javax.swing.JTextField();
        btnIngresarNroAleatorio = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnIngresarCantidad = new javax.swing.JButton();
        campoCantidadAleatorios = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaConclusion = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        textCantidad = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        textCosto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EJERCICIO 5 - VENTA JUEGOS UNIVERSIDAD");

        tablaDistribuciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad", "Distr. Acumulada", "Rango Inferior", "Rango Superior", "Programas vendidos"
            }
        ));
        jScrollPane1.setViewportView(tablaDistribuciones);

        jLabel6.setText("DISTRIBUCION DE PROBABILIDADES");

        jLabel10.setText("-------------------------------------------------");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Distribucion de Probabilidades:");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel8.setText("Probabilidad:");

        jLabel9.setText("vendidos:");

        campoProbabilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoProbabilidadActionPerformed(evt);
            }
        });

        btnIngresarDistribucion.setText("Ingresar");
        btnIngresarDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarDistribucionActionPerformed(evt);
            }
        });

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        jLabel7.setText("TABLA DE SIMULACION");

        limpiarTablaSimulacion.setText("Limpiar tabla de simulacion");
        limpiarTablaSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaSimulacionActionPerformed(evt);
            }
        });

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Nro Aleatorio", "Demanda", "Ganancia"
            }
        ));
        jScrollPane2.setViewportView(tablaFinal);

        btnLimpiar.setText("Vaciar Todo");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });

        jLabel11.setText("---------- valores continuos -------------");

        jLabel2.setText("Ingresar numeros aleatorios: ");

        campoNumeroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNumeroAleatorioActionPerformed(evt);
            }
        });

        btnIngresarNroAleatorio.setText("Ingresar");
        btnIngresarNroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarNroAleatorioActionPerformed(evt);
            }
        });

        jLabel3.setText("Generar numeros Aleatorios:");

        jLabel4.setText("Ingrese cantidad:");

        btnIngresarCantidad.setText("Generar");
        btnIngresarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCantidadActionPerformed(evt);
            }
        });

        jLabel12.setText("--------------------------2----------------------");

        jLabel13.setText("Conclusion:");

        areaConclusion.setColumns(20);
        areaConclusion.setRows(5);
        jScrollPane3.setViewportView(areaConclusion);

        jLabel14.setText("cantidad:");

        textCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCantidadActionPerformed(evt);
            }
        });

        jLabel15.setText("Costo:");

        jLabel16.setText("--------------------------1----------------------");

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel11)
                            .addGap(63, 63, 63))
                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel15)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnIngresarNroAleatorio))))
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addGap(22, 22, 22)
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel8)
                                                .addComponent(jLabel9))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(campoVendidos)
                                                .addComponent(campoProbabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addComponent(jLabel10)
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addGap(30, 30, 30)
                                    .addComponent(btnEjemplo))
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addGap(16, 16, 16)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(btnIngresarCantidad)
                                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                    .addComponent(jLabel4)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(campoCantidadAleatorios))
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jLabel12)))
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addGap(69, 69, 69)
                                    .addComponent(btnIngresarDistribucion)))
                            .addGap(42, 42, 42)))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addGap(18, 18, 18)
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textCosto, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                        .addComponent(textCantidad))
                                    .addGap(83, 83, 83))
                                .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelEjercicio1Layout.createSequentialGroup()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(limpiarTablaSimulacion))
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLimpiar)
                                .addGap(37, 37, 37))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnEvaluar)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(limpiarTablaSimulacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEvaluar))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnEjemplo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoProbabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoVendidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIngresarDistribucion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(10, 10, 10)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(textCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresarNroAleatorio))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(campoCantidadAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(btnIngresarCantidad)))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelEjercicio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelEjercicio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void campoProbabilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoProbabilidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoProbabilidadActionPerformed

    private void btnIngresarDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarDistribucionActionPerformed
        try{    
        double distribucionAcum = 0.0;
        double probabilidad = Double.valueOf(campoProbabilidad.getText());
        int vendidos = Integer.valueOf(campoVendidos.getText());

        DefaultTableModel model = (DefaultTableModel) tablaDistribuciones.getModel();
        distribucionAcum = probabilidad;

        double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
        double rangoSuperior = probabilidad;

        int rowCount = model.getRowCount();
        if (rowCount > 0) {

            double anteriorAcum = (double) model.getValueAt(rowCount - 1, 1);
            double rangoSuperiorAnterior = (double) model.getValueAt(rowCount - 1, 3);
            rangoInferior = rangoSuperiorAnterior;
            distribucionAcum = anteriorAcum + probabilidad;
            rangoSuperior = distribucionAcum;
        }
        
        probabilidad = Math.round(probabilidad * 100.0) / 100.0;
        distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
        rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
        rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

        model.addRow(new Object[]{probabilidad,distribucionAcum, rangoInferior, rangoSuperior, vendidos});
        campoProbabilidad.setText("");
        campoVendidos.setText("");
        } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnIngresarDistribucionActionPerformed

    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);

        // Agregar datos predefinidos a tablaDistribuciones
        Object[][] datosDistribucion = {
            {0.15, 0.15, 0.0, 0.15, 2300},
            {0.22, 0.37, 0.15, 0.37, 2400},
            {0.24, 0.61, 0.37, 0.61, 2500},
            {0.21, 0.82, 0.61, 0.82, 2600},
            {0.18, 1.0, 0.82, 1.0, 2700},
        };

        for (Object[] fila : datosDistribucion) {
            modelDistribuciones.addRow(fila);
        }

        // Datos de números aleatorios predefinidos
        double[] numerosAleatorios = {0.07, 0.60, 0.77, 0.49, 0.76, 0.95, 0.51, 0.16, 0.14, 0.85};

        // Procesar los números aleatorios y asignarles demanda según la tabla de distribuciones
        for (int i = 0; i < numerosAleatorios.length; i++) {
            double numAleatorio = numerosAleatorios[i];
            int programaVendido = 0;

            // Buscar el color en base al rango
            for (int j = 0; j < modelDistribuciones.getRowCount(); j++) {
                double rangoInferior = (double) modelDistribuciones.getValueAt(j, 2);
                double rangoSuperior = (double) modelDistribuciones.getValueAt(j, 3);
                int programaVendidoAsignado = (Integer) modelDistribuciones.getValueAt(j, 4);

                if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                    programaVendido = programaVendidoAsignado;
                    break;
                }
            }
            
            double ganancia = 0.0;
            
            if(programaVendido < 2500){
                ganancia = (programaVendido*2)-(2500*0.8);
            }else{
                ganancia = (2500*2)-(2500*0.8);
            }

            // Agregar fila a tablaFinal
            modelFinal.addRow(new Object[]{i + 1, numAleatorio, programaVendido,ganancia});
        }
    }//GEN-LAST:event_btnEjemploActionPerformed

    private void limpiarTablaSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaSimulacionActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        modelFinal.setRowCount(0);
    }//GEN-LAST:event_limpiarTablaSimulacionActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);

        areaConclusion.setText("");
        textCantidad.setText("");
        textCosto.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
    int totalDatos = modelFinal.getRowCount();
    int totalGanancia = 0;

    // Sumar todas las ganancias de la columna 3 (índice 3)
    for (int i = 0; i < totalDatos; i++) {
        Object valorGanancia = modelFinal.getValueAt(i, 3); // Columna 3 = "ganancia"
        if (valorGanancia instanceof Number) {
            totalGanancia += ((Number) valorGanancia).intValue();
        } else {
            try {
                totalGanancia += Integer.parseInt(valorGanancia.toString());
            } catch (NumberFormatException e) {
                // Si hay un error, ignoramos ese valor y continuamos
            }
        }
    }

    // Mostrar el total en el área de texto
    areaConclusion.setText("El total de ganancia es: " + totalGanancia);
    }//GEN-LAST:event_btnEvaluarActionPerformed

    private void campoNumeroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNumeroAleatorioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNumeroAleatorioActionPerformed

    private void btnIngresarNroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarNroAleatorioActionPerformed
        try {
        // Obtener los valores de los campos y validarlos
        String textoNumeroAleatorio = campoNumeroAleatorio.getText().trim();
        String textoCantidad = textCantidad.getText().trim();
        String textoCosto = textCosto.getText().trim();

        // Validar que los campos no estén vacíos
        if (textoNumeroAleatorio.isEmpty() || textoCantidad.isEmpty() || textoCosto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay algún campo vacío
        }

        // Convertir los valores a números
        double numAleatorio = Double.parseDouble(textoNumeroAleatorio);
        int cantidad = Integer.parseInt(textoCantidad);
        double costo = Double.parseDouble(textoCosto);
        double ganancia = 0.0;
        int demanda = 0;
        int numero = 1;

        DefaultTableModel model = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();

        int rowCount = model.getRowCount();
        if (rowCount > 0) {
            numero = rowCount + 1;
        }

        // Recorrer la tabla de distribuciones para encontrar la demanda correspondiente
        for (int i = 0; i < modelDistribuciones.getRowCount(); i++) {
            double rangoInferior = (double) modelDistribuciones.getValueAt(i, 2);
            double rangoSuperior = (double) modelDistribuciones.getValueAt(i, 3);
            Integer vendidos = (Integer) modelDistribuciones.getValueAt(i, 4);

            if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                demanda = vendidos;
                if (demanda < cantidad) {
                    ganancia = (demanda * 2) - (cantidad * costo);
                } else {
                    ganancia = (cantidad * 2) - (cantidad * costo);
                }
                break; // Detenerse cuando encuentra el valor correspondiente
            }
        }

        // Agregar los datos a la tabla
        model.addRow(new Object[]{numero, numAleatorio, demanda, ganancia}); // Convertir ganancia a entero

        // Limpiar el campo después de agregar
        campoNumeroAleatorio.setText("");
        textCantidad.setText(String.valueOf(cantidad));
        textCosto.setText(String.valueOf(costo));

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnIngresarNroAleatorioActionPerformed

    private void btnIngresarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCantidadActionPerformed
        try {
            int cantidadAleatorios = Integer.parseInt(campoCantidadAleatorios.getText()); // Obtener la cantidad ingresada
            int cantConstante = Integer.parseInt(textCantidad.getText());
            double costo = Double.parseDouble(textCosto.getText());
            DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
            DefaultTableModel modelDistribucion = (DefaultTableModel) tablaDistribuciones.getModel();
            double ganancia = 0.0;

            for (int i = 0; i < cantidadAleatorios; i++) {
                double numAleatorio = Math.round(Math.random() * 100.0) / 100.0; // Generar número aleatorio entre 0 y 1 con 2 decimales
                int demanda = 0;

                // Buscar la demanda correspondiente en la tablaDistribuciones
                for (int j = 0; j < modelDistribucion.getRowCount(); j++) {
                    double rangoInferior = (double) modelDistribucion.getValueAt(j, 2);
                    double rangoSuperior = (double) modelDistribucion.getValueAt(j, 3);

                    if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                        demanda = (Integer) modelDistribucion.getValueAt(j, 4); // Asignar la demanda correspondiente
                        
                        if (demanda < cantConstante) {
                            ganancia = (demanda * 2) - (cantConstante * costo);
                        } else {
                            ganancia = (cantConstante * 2) - (cantConstante * costo);
                        }
                        
                        break; // Terminar la búsqueda cuando encuentre la demanda
                    }
                }

                // Agregar la fila a la tablaFinal
                modelFinal.addRow(new Object[]{i + 1, numAleatorio, demanda, ganancia});
            }

            campoCantidadAleatorios.setText(""); // Limpiar el campo de entrada
            textCantidad.setText(String.valueOf(cantConstante));
            textCosto.setText(String.valueOf(costo));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarCantidadActionPerformed

    private void textCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCantidadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JTextArea areaConclusion;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnIngresarCantidad;
    private javax.swing.JButton btnIngresarDistribucion;
    private javax.swing.JButton btnIngresarNroAleatorio;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JTextField campoCantidadAleatorios;
    private javax.swing.JTextField campoNumeroAleatorio;
    private javax.swing.JTextField campoProbabilidad;
    private javax.swing.JTextField campoVendidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarTablaSimulacion;
    private javax.swing.JTable tablaDistribuciones;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTextField textCantidad;
    private javax.swing.JTextField textCosto;
    // End of variables declaration//GEN-END:variables
}
