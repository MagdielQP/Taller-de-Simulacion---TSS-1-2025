
package tss.actividad3.GUI;

import java.util.Arrays;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class VentanaEjercicio2 extends javax.swing.JPanel {

    public VentanaEjercicio2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnEjemplo = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        campoNumeroAleatorio = new javax.swing.JTextField();
        btnIngresarNroAleatorio = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        btnIngresarCantidad = new javax.swing.JButton();
        campoCantidadAleatorios = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaNrosAleatorios = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        btnEvaluarFinal = new javax.swing.JButton();
        limpiarTablaAleatorios = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        campoProbabilidad = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        campoVendidos = new javax.swing.JTextField();
        btnIngresarDistribucion = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        campoProbPacientes = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        campoSangre = new javax.swing.JTextField();
        btnIngresarNroPacientes = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        campoProbDemanda = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        campoPintas = new javax.swing.JTextField();
        btnIngresarDemanda = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaNroPacientes = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaDemanda = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaEntregas = new javax.swing.JTable();
        btnConclusion = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        areaConclusion = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel18.setText("---------------------------------------");

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EJERCICIO 2 - BANCO DE SANGRE");

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("ENTREGA");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel6.setText("TABLA DE ENTREGAS");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("NUMERO DE PACIENTES");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel12.setText("TABLA DE NUMERO DE PACIENTES");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("DEMANDA DE PACIENTES");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel16.setText("TABLA DE DEMANDA DE PACIENTES");

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro de Semanas", "Inv. Inicial", "Nro Aleatorio", "Pintas", "Total Sangre Disponible", "Nro Aleatorio", "Nro Pacientes", "Nro de Pacientes", "Nro Aleatorio", "Pintas", "Nro Pintas restantes"
            }
        ));
        jScrollPane3.setViewportView(tablaFinal);

        jLabel17.setText("---------------------------------------------");

        jLabel19.setText("---------------------------------------------");

        jLabel20.setText("Ingresar numeros aleatorios: ");

        campoNumeroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNumeroAleatorioActionPerformed(evt);
            }
        });

        btnIngresarNroAleatorio.setText("Ingresar");
        btnIngresarNroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarNroAleatorioActionPerformed(evt);
            }
        });

        jLabel21.setText("--------------------------------------------");

        jLabel22.setText("Generar numeros Aleatorios:");

        jLabel23.setText("Ingrese cantidad:");

        btnIngresarCantidad.setText("Generar");
        btnIngresarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCantidadActionPerformed(evt);
            }
        });

        campoCantidadAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCantidadAleatoriosActionPerformed(evt);
            }
        });

        jLabel24.setText("---------------------------------------------");

        tablaNrosAleatorios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero ", "Nro Aleatorio"
            }
        ));
        jScrollPane6.setViewportView(tablaNrosAleatorios);

        jLabel25.setText("TABLA DE NUMEROS ALEATORIOS");

        btnEvaluarFinal.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnEvaluarFinal.setText("EVALUAR");
        btnEvaluarFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarFinalActionPerformed(evt);
            }
        });

        limpiarTablaAleatorios.setText("Limpiar tabla de numeros aleatorios");
        limpiarTablaAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaAleatoriosActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Vaciar Todo");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel8.setText("Probabilidad:");

        campoProbabilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoProbabilidadActionPerformed(evt);
            }
        });

        jLabel9.setText("Pintas:");

        btnIngresarDistribucion.setText("Ingresar");
        btnIngresarDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarDistribucionActionPerformed(evt);
            }
        });

        jLabel26.setText("Probabilidad:");

        campoProbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoProbPacientesActionPerformed(evt);
            }
        });

        jLabel27.setText("Sangre:");

        btnIngresarNroPacientes.setText("Ingresar");
        btnIngresarNroPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarNroPacientesActionPerformed(evt);
            }
        });

        jLabel28.setText("Probabilidad:");

        campoProbDemanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoProbDemandaActionPerformed(evt);
            }
        });

        jLabel29.setText("Pintas::");

        btnIngresarDemanda.setText("Ingresar");
        btnIngresarDemanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarDemandaActionPerformed(evt);
            }
        });

        tablaNroPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad", "Distr. Acumulada", "Rango Inferior", "Rango Superior", " Sangre"
            }
        ));
        jScrollPane1.setViewportView(tablaNroPacientes);

        tablaDemanda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad", "Distr. Acumulada", "Rango Inferior", "Rango Superior", "Pintas"
            }
        ));
        jScrollPane7.setViewportView(tablaDemanda);

        tablaEntregas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Probabilidad", "Distr. Acumulada", "Rango Inferior", "Rango Superior", "Pintas"
            }
        ));
        jScrollPane8.setViewportView(tablaEntregas);

        btnConclusion.setText("CONCLUSION");
        btnConclusion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConclusionActionPerformed(evt);
            }
        });

        areaConclusion.setColumns(20);
        areaConclusion.setRows(5);
        jScrollPane5.setViewportView(areaConclusion);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CANTIDAD DE ENTREGA DE SANGRE");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("PACIENTES QUE NECESITAN SANGRE");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("DEMANDA POR PACIENTE");

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1565, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(436, 436, 436)
                                .addComponent(btnConclusion, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 1002, Short.MAX_VALUE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(341, 341, 341)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 898, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(318, 318, 318)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addGap(21, 21, 21)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel26)
                                                .addComponent(jLabel27))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(campoSangre)
                                                .addComponent(campoProbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                            .addGap(15, 15, 15)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnEjemplo)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(67, 67, 67)))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addGap(63, 63, 63)
                                                .addComponent(btnIngresarNroPacientes))
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addGap(64, 64, 64)
                                                .addComponent(btnIngresarDistribucion))
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel8)
                                                            .addComponent(jLabel9))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(campoVendidos)
                                                            .addComponent(campoProbabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel17)
                                                        .addComponent(jLabel19)))))
                                        .addGap(61, 61, 61)))
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel28)
                                            .addComponent(jLabel29))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(campoPintas)
                                            .addComponent(campoProbDemanda, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(btnIngresarDemanda))
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnIngresarNroAleatorio))
                                    .addComponent(jLabel24)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnIngresarCantidad)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addComponent(jLabel23)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(campoCantidadAleatorios))
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(63, 63, 63)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(215, 215, 215)
                                        .addComponent(limpiarTablaAleatorios))
                                    .addComponent(jLabel25)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(75, 75, 75)
                                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(298, 298, 298)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEvaluarFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(146, 146, 146)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(btnEjemplo)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoProbabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoVendidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addComponent(btnIngresarDistribucion))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addGap(8, 8, 8)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7)
                        .addGap(14, 14, 14)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoProbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoSangre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addComponent(btnIngresarNroPacientes)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoProbDemanda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoPintas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIngresarDemanda)))
                .addGap(37, 37, 37)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(limpiarTablaAleatorios)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresarNroAleatorio))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel22)
                        .addGap(4, 4, 4)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(campoCantidadAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(btnIngresarCantidad)))
                .addGap(18, 18, 18)
                .addComponent(btnEvaluarFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConclusion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jScrollPane4.setViewportView(PanelEjercicio1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1120, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        DefaultTableModel modelEntregas = (DefaultTableModel) tablaEntregas.getModel();
        DefaultTableModel modelDemanda = (DefaultTableModel) tablaDemanda.getModel();
        DefaultTableModel modelNroPacientes = (DefaultTableModel) tablaNroPacientes.getModel();
        DefaultTableModel modelAleatorios = (DefaultTableModel) tablaNrosAleatorios.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        
        modelEntregas.setRowCount(0);
        modelDemanda.setRowCount(0);
        modelNroPacientes.setRowCount(0);
        modelAleatorios.setRowCount(0);
        modelFinal.setRowCount(0);
        areaConclusion.setText("");
        
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void limpiarTablaAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaAleatoriosActionPerformed
        DefaultTableModel modelAleatorios = (DefaultTableModel) tablaNrosAleatorios.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        
        modelAleatorios.setRowCount(0);
        modelFinal.setRowCount(0);
        
    }//GEN-LAST:event_limpiarTablaAleatoriosActionPerformed

    private void btnEvaluarFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarFinalActionPerformed
         // Crear una pila para almacenar los números aleatorios en orden LIFO (último en entrar, primero en salir)
    Stack<Double> pilaNumeros = new Stack<>();
    
    // Llenar la pila con los valores de la columna "Nro Aleatorio" de tablaNrosAleatorios
    DefaultTableModel modeloNrosAleatorios = (DefaultTableModel) tablaNrosAleatorios.getModel();
    for (int i = modeloNrosAleatorios.getRowCount() - 1; i >= 0; i--) {
        pilaNumeros.push(Double.parseDouble(modeloNrosAleatorios.getValueAt(i, 1).toString()));
    }
    
    // Obtener el modelo de la tablaFinal
    DefaultTableModel modeloFinal = (DefaultTableModel) tablaFinal.getModel();
    
    int valorColumna2 = 0; // Inicialmente 0
    
    for (int contadorFila = 1; !pilaNumeros.isEmpty(); contadorFila++) {
        if (pilaNumeros.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay más números aleatorios para evaluar.");
            break;
        }
        
        double valorColumna3 = pilaNumeros.pop();
        int valorColumna4 = (int)obtenerValorDesdeRango(tablaEntregas, valorColumna3);
        int valorColumna5 = valorColumna4 + valorColumna2;
        
        if (pilaNumeros.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay más números aleatorios para evaluar.");
            break;
        }
        
        double valorColumna6 = pilaNumeros.pop();
        double valorColumna7 = obtenerValorDesdeRango(tablaNroPacientes, valorColumna6);
        double valorColumna8 = valorColumna7;
        
        if (valorColumna8 == 1) {
            if (pilaNumeros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay más números aleatorios para evaluar.");
                break;
            }
            
            double valorColumna9 = pilaNumeros.pop();
            int valorColumna10 = (int)obtenerValorDesdeRango(tablaDemanda, valorColumna9);
            int valorColumna11 = valorColumna5 - valorColumna10;
            
            modeloFinal.addRow(new Object[]{contadorFila, valorColumna2, valorColumna3, valorColumna4, valorColumna5, valorColumna6, valorColumna7, valorColumna8, valorColumna9, valorColumna10, valorColumna11});
            valorColumna2 = valorColumna11; // La columna 2 de la siguiente fila toma este valor
            
        }else if(valorColumna8 == 0){
            int valorColumna11 = valorColumna5;
            modeloFinal.addRow(new Object[]{contadorFila, valorColumna2, valorColumna3, valorColumna4, valorColumna5, valorColumna6, valorColumna7, "", "", "", valorColumna11});
            valorColumna2 = valorColumna11; // La columna 2 de la siguiente fila toma este valor
        } else {
            int pacientesPendientes = (int) valorColumna8;
            double valorColumna9 = pilaNumeros.pop();
            int valorColumna10 = (int) obtenerValorDesdeRango(tablaDemanda, valorColumna9);
            int valorColumna11 = valorColumna5 - valorColumna10;
            
            modeloFinal.addRow(new Object[]{contadorFila, valorColumna2, valorColumna3, valorColumna4, valorColumna5, valorColumna6, valorColumna7, valorColumna8, valorColumna9, valorColumna10, valorColumna11});
            pacientesPendientes--;
            
            while (pacientesPendientes > 0) {
                valorColumna9 = pilaNumeros.pop();
                valorColumna10 = (int)obtenerValorDesdeRango(tablaDemanda, valorColumna9);
                valorColumna11 = valorColumna11 - valorColumna10;
                modeloFinal.addRow(new Object[]{"", "", "", "", "", "", "", pacientesPendientes, valorColumna9, valorColumna10, valorColumna11});
                pacientesPendientes--;
            }
            valorColumna2 = valorColumna11; // Se mantiene para la siguiente fila
        }
    }
}

// Método para obtener un valor basado en un número dentro de un rango en una tabla específica
    private double obtenerValorDesdeRango(JTable tabla, double numero) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            double rangoInferior = Double.parseDouble(modelo.getValueAt(i, 2).toString());
            double rangoSuperior = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            if (numero >= rangoInferior && numero <= rangoSuperior) {
                return Double.parseDouble(modelo.getValueAt(i, 4).toString());
            }
        }
        return 0; // Si no se encuentra en ningún rango


    }//GEN-LAST:event_btnEvaluarFinalActionPerformed

    private void campoCantidadAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCantidadAleatoriosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCantidadAleatoriosActionPerformed

    private void btnIngresarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCantidadActionPerformed
        try {
            int cantidadAleatorios = Integer.parseInt(campoCantidadAleatorios.getText()); // Obtener la cantidad ingresada
            DefaultTableModel modelAleatorio = (DefaultTableModel) tablaNrosAleatorios.getModel();
            
            double ganancia = 0.0;
            int ventaCalentadores = 0;

            for (int i = 0; i < cantidadAleatorios; i++) {
                double numAleatorio = Math.round(Math.random() * 100.0) / 100.0; // Generar número aleatorio entre 0 y 1 con 2 decimales

                // Agregar la fila a la tablaFinal
                modelAleatorio.addRow(new Object[]{i + 1, numAleatorio});
            }

            campoCantidadAleatorios.setText(""); // Limpiar el campo de entrada

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarCantidadActionPerformed

    private void btnIngresarNroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarNroAleatorioActionPerformed
        try {
            // Obtener los valores de los campos y validarlos
            String textoNumeroAleatorio = campoNumeroAleatorio.getText().trim();

            // Validar que los campos no estén vacíos
            if (textoNumeroAleatorio.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si hay algún campo vacío
            }

            // Convertir los valores a números
            double numAleatorio = Double.parseDouble(textoNumeroAleatorio);
            int ventaCalentadores = 0;
            int numero = 1;

            DefaultTableModel model = (DefaultTableModel) tablaNrosAleatorios.getModel();

            int rowCount = model.getRowCount();
            if (rowCount > 0) {
                numero = rowCount + 1;
            }

            // Agregar los datos a la tabla
            model.addRow(new Object[]{numero, numAleatorio}); // Convertir ganancia a entero

            // Limpiar el campo después de agregar
            campoNumeroAleatorio.setText("");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarNroAleatorioActionPerformed

    private void campoNumeroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNumeroAleatorioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNumeroAleatorioActionPerformed

    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        DefaultTableModel modelEntregas = (DefaultTableModel) tablaEntregas.getModel();
        DefaultTableModel modelNroPacientes = (DefaultTableModel) tablaNroPacientes.getModel();
        DefaultTableModel modelDemanda = (DefaultTableModel) tablaDemanda.getModel();
        DefaultTableModel modelNrosAleatorios = (DefaultTableModel) tablaNrosAleatorios.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        // Limpiar tablas
        modelEntregas.setRowCount(0);
        modelNroPacientes.setRowCount(0);
        modelDemanda.setRowCount(0);
        modelNrosAleatorios.setRowCount(0);
        modelFinal.setRowCount(0);

        // Datos para tablaEntregas
        Object[][] datosEntregas = {
            {0.15, 0.15, 0.00, 0.15, 4},
            {0.20, 0.35, 0.15, 0.35, 5},
            {0.25, 0.60, 0.35, 0.60, 6},
            {0.15, 0.75, 0.60, 0.75, 7},
            {0.10, 0.90, 0.75, 0.90, 8},
            {0.10, 1.00, 0.90, 1.00, 9},
        };

        for (Object[] fila : datosEntregas) {
            modelEntregas.addRow(fila);
        }

        // Datos para tablaNroPacientes
        Object[][] datosNroPacientes = {
            {0.25, 0.25, 0.00, 0.25, 0},
            {0.25, 0.50, 0.25, 0.50, 1},
            {0.30, 0.80, 0.50, 0.80, 2},
            {0.15, 0.95, 0.80, 0.95, 3},
            {0.05, 1.00, 0.95, 1.00, 4},
        };

        for (Object[] fila : datosNroPacientes) {
            modelNroPacientes.addRow(fila);
        }

        // Datos para tablaDemanda
        Object[][] datosDemanda = {
            {0.40, 0.40, 0.00, 0.40, 1},
            {0.30, 0.70, 0.40, 0.70, 2},
            {0.20, 0.90, 0.70, 0.90, 3},
            {0.10, 1.00, 0.90, 1.00, 4},
        };

        for (Object[] fila : datosDemanda) {
            modelDemanda.addRow(fila);
        }

        // Datos para tablaNrosAleatorios
        double[] numerosAleatorios = {0.74, 0.85, 0.21, 0.06, 0.71, 0.31, 0.28, 0.96, 0.02, 0.72, 
                                      0.12, 0.67, 0.53, 0.44, 0.23, 0.16, 0.16, 0.40, 0.83, 0.65, 
                                      0.34, 0.82};

        for (int i = 0; i < numerosAleatorios.length; i++) {
            modelNrosAleatorios.addRow(new Object[]{i + 1, numerosAleatorios[i]});
        }

        // Datos para tablaFinal
        Object[][] datosFinal = {
            {1, 0, 0.74, 7, 7, 0.85, 3, 1, 0.21, 1, 6},
            {"", "", "", "", "", "", "", 2, 0.06, 1, 5},
            {"", "", "", "", "", "", "", 3, 0.71, 3, 2},
            {3, 3, 0.02, 4, 7, 0.28, 1, 1, 0.96, 4, 3},
            {4, 4, 0.53, 6, 10, 0.44, 1, 1, 0.23, 1, 9},
            {5, 9, 0.16, 5, 14, 0.16, 0, "", "", "", 14},
            {6, 14, 0.40, 6, 20, 0.83, 3, 1, 0.65, 2, 18},
            {"", "", "", "", "", "", "", 2, 0.34, 1, 17},
            {"", "", "", "", "", "", "", 3, 0.82, 3, 14}
        };

        for (Object[] fila : datosFinal) {
            modelFinal.addRow(fila);
        }
    }//GEN-LAST:event_btnEjemploActionPerformed

    private void campoProbabilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoProbabilidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoProbabilidadActionPerformed

    private void btnIngresarDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarDistribucionActionPerformed
        try{
            double distribucionAcum = 0.0;
            double probabilidad = Double.valueOf(campoProbabilidad.getText());
            int pintas = Integer.valueOf(campoVendidos.getText());

            DefaultTableModel model = (DefaultTableModel) tablaEntregas.getModel();
            distribucionAcum = probabilidad;

            double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
            double rangoSuperior = probabilidad;

            int rowCount = model.getRowCount();
            if (rowCount > 0) {

                double anteriorAcum = (double) model.getValueAt(rowCount - 1, 1);
                double rangoSuperiorAnterior = (double) model.getValueAt(rowCount - 1, 3);
                rangoInferior = rangoSuperiorAnterior;
                distribucionAcum = anteriorAcum + probabilidad;
                rangoSuperior = distribucionAcum;
            }

            probabilidad = Math.round(probabilidad * 100.0) / 100.0;
            distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
            rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
            rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

            model.addRow(new Object[]{probabilidad,distribucionAcum, rangoInferior, rangoSuperior, pintas});
            campoProbabilidad.setText("");
            campoVendidos.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarDistribucionActionPerformed

    private void campoProbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoProbPacientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoProbPacientesActionPerformed

    private void btnIngresarNroPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarNroPacientesActionPerformed
        try{
            double distribucionAcum = 0.0;
            double probabilidad = Double.valueOf(campoProbPacientes.getText());
            int sangre = Integer.valueOf(campoSangre.getText());

            DefaultTableModel model = (DefaultTableModel) tablaNroPacientes.getModel();
            distribucionAcum = probabilidad;

            double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
            double rangoSuperior = probabilidad;

            int rowCount = model.getRowCount();
            if (rowCount > 0) {

                double anteriorAcum = (double) model.getValueAt(rowCount - 1, 1);
                double rangoSuperiorAnterior = (double) model.getValueAt(rowCount - 1, 3);
                rangoInferior = rangoSuperiorAnterior;
                distribucionAcum = anteriorAcum + probabilidad;
                rangoSuperior = distribucionAcum;
            }

            probabilidad = Math.round(probabilidad * 100.0) / 100.0;
            distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
            rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
            rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

            model.addRow(new Object[]{probabilidad,distribucionAcum, rangoInferior, rangoSuperior, sangre});
            campoProbPacientes.setText("");
            campoSangre.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarNroPacientesActionPerformed

    private void campoProbDemandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoProbDemandaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoProbDemandaActionPerformed

    private void btnIngresarDemandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarDemandaActionPerformed
        try{
            double distribucionAcum = 0.0;
            double probabilidad = Double.valueOf(campoProbDemanda.getText());
            int pintas = Integer.valueOf(campoPintas.getText());

            DefaultTableModel model = (DefaultTableModel) tablaDemanda.getModel();
            distribucionAcum = probabilidad;

            double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
            double rangoSuperior = probabilidad;

            int rowCount = model.getRowCount();
            if (rowCount > 0) {

                double anteriorAcum = (double) model.getValueAt(rowCount - 1, 1);
                double rangoSuperiorAnterior = (double) model.getValueAt(rowCount - 1, 3);
                rangoInferior = rangoSuperiorAnterior;
                distribucionAcum = anteriorAcum + probabilidad;
                rangoSuperior = distribucionAcum;
            }

            probabilidad = Math.round(probabilidad * 100.0) / 100.0;
            distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
            rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
            rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

            model.addRow(new Object[]{probabilidad,distribucionAcum, rangoInferior, rangoSuperior, pintas});
            campoProbDemanda.setText("");
            campoPintas.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIngresarDemandaActionPerformed

    private void btnConclusionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConclusionActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
    int totalPintas = modelFinal.getRowCount();
    int total = (int) tablaFinal.getValueAt(totalPintas-1, 10);
    
    // Verificar que haya al menos una fila en la tabla
    if (totalPintas == 0) {
        areaConclusion.setText("No hay datos en la tabla.");
        return;
    }

    int filaIndex = totalPintas - 1;
    Object semanaFinal = modelFinal.getValueAt(filaIndex, 0);

    // Retroceder hasta encontrar un valor distinto de ""
    while (filaIndex > 0 && (semanaFinal == null || semanaFinal.toString().trim().isEmpty())) {
        filaIndex--;
        semanaFinal = modelFinal.getValueAt(filaIndex, 0);
    }

    Object datoFinal = modelFinal.getValueAt(filaIndex, 10);

    // Mostrar el total en el área de texto con mejor formato
    areaConclusion.setText("Al final de la semana " + semanaFinal + " hay " + total + " pintas restantes.");
    }//GEN-LAST:event_btnConclusionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JTextArea areaConclusion;
    private javax.swing.JButton btnConclusion;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnEvaluarFinal;
    private javax.swing.JButton btnIngresarCantidad;
    private javax.swing.JButton btnIngresarDemanda;
    private javax.swing.JButton btnIngresarDistribucion;
    private javax.swing.JButton btnIngresarNroAleatorio;
    private javax.swing.JButton btnIngresarNroPacientes;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JTextField campoCantidadAleatorios;
    private javax.swing.JTextField campoNumeroAleatorio;
    private javax.swing.JTextField campoPintas;
    private javax.swing.JTextField campoProbDemanda;
    private javax.swing.JTextField campoProbPacientes;
    private javax.swing.JTextField campoProbabilidad;
    private javax.swing.JTextField campoSangre;
    private javax.swing.JTextField campoVendidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JButton limpiarTablaAleatorios;
    private javax.swing.JTable tablaDemanda;
    private javax.swing.JTable tablaEntregas;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTable tablaNroPacientes;
    private javax.swing.JTable tablaNrosAleatorios;
    // End of variables declaration//GEN-END:variables
}
