
package tss.actividad3.GUI;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class VentanaEjercicio1 extends javax.swing.JPanel {

    public VentanaEjercicio1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnEjemplo = new javax.swing.JButton();
        campoNumeroAleatorio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnIngresarNroAleatorio = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnIngresarCantidad = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campoCantidad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        campoColor = new javax.swing.JTextField();
        btnIngresarDistribucion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDistribuciones = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        campoDistribucion = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        limpiarTablaSimulacion = new javax.swing.JButton();
        btnEvaluar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaConclusion = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EJERCICIO 1 - URNA CON PELOTAS");

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        campoNumeroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNumeroAleatorioActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingresar numeros aleatorios: ");

        btnIngresarNroAleatorio.setText("Ingresar");
        btnIngresarNroAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarNroAleatorioActionPerformed(evt);
            }
        });

        jLabel3.setText("Generar numeros Aleatorios:");

        btnIngresarCantidad.setText("Generar");
        btnIngresarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCantidadActionPerformed(evt);
            }
        });

        jLabel4.setText("Ingrese cantidad:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Distribucion de Probabilidades:");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        btnIngresarDistribucion.setText("Ingresar");
        btnIngresarDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarDistribucionActionPerformed(evt);
            }
        });

        tablaDistribuciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Distr. Acumulada", "Rango Inferior", "Rango Superior", "Color"
            }
        ));
        jScrollPane1.setViewportView(tablaDistribuciones);

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Nro Aleatorio", "Color"
            }
        ));
        jScrollPane2.setViewportView(tablaFinal);

        jLabel6.setText("DISTRIBUCION DE PROBABILIDADES");

        jLabel7.setText("TABLA DE SIMULACION");

        jLabel8.setText("Distribucion:");

        jLabel9.setText("Color:");

        campoDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoDistribucionActionPerformed(evt);
            }
        });

        jLabel10.setText("---------------------------------------");

        jLabel11.setText("---------------------1-----------------");

        jLabel12.setText("---------------------2-----------------");

        btnLimpiar.setText("Vaciar Todo");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        limpiarTablaSimulacion.setText("Limpiar tabla de simulacion");
        limpiarTablaSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaSimulacionActionPerformed(evt);
            }
        });

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });

        areaConclusion.setColumns(20);
        areaConclusion.setRows(5);
        jScrollPane3.setViewportView(areaConclusion);

        jLabel13.setText("Conclusion:");

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnIngresarCantidad)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(campoColor)
                                            .addComponent(campoDistribucion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(campoCantidad))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelEjercicio1Layout.createSequentialGroup()
                                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnIngresarNroAleatorio))
                                        .addComponent(btnEjemplo, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(btnIngresarDistribucion)))
                        .addGap(53, 53, 53)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane2)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(limpiarTablaSimulacion))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(0, 18, Short.MAX_VALUE)
                                        .addComponent(btnLimpiar))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(btnEvaluar)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel13))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(btnEjemplo)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8))
                            .addComponent(campoDistribucion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(campoColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIngresarDistribucion)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoNumeroAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresarNroAleatorio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(campoCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(limpiarTablaSimulacion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEvaluar)))))
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnIngresarCantidad))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelEjercicio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelEjercicio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);

        // Agregar datos predefinidos a tablaDistribuciones
        Object[][] datosDistribucion = {
            {0.1, 0.0, 0.1, "Verde"},
            {0.5, 0.1, 0.5, "Rojo"},
            {1.0, 0.5, 1.0, "Amarillo"}
        };

        for (Object[] fila : datosDistribucion) {
            modelDistribuciones.addRow(fila);
        }

        // Datos de números aleatorios predefinidos
        double[] numerosAleatorios = {0.26, 0.42, 0.95, 0.95, 0.66, 0.17, 0.03, 0.56, 0.83, 0.55};

        // Procesar los números aleatorios y asignarles color según la tabla de distribuciones
        for (int i = 0; i < numerosAleatorios.length; i++) {
            double numAleatorio = numerosAleatorios[i];
            String color = "";
        
            // Buscar el color en base al rango
            for (int j = 0; j < modelDistribuciones.getRowCount(); j++) {
                double rangoInferior = (double) modelDistribuciones.getValueAt(j, 1);
                double rangoSuperior = (double) modelDistribuciones.getValueAt(j, 2);
                String colorAsignado = (String) modelDistribuciones.getValueAt(j, 3);

                if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                    color = colorAsignado;
                    break;
                }
            }

            // Agregar fila a tablaFinal
            modelFinal.addRow(new Object[]{i + 1, numAleatorio, color});
        }
    }//GEN-LAST:event_btnEjemploActionPerformed

    private void campoNumeroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNumeroAleatorioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNumeroAleatorioActionPerformed

    private void btnIngresarNroAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarNroAleatorioActionPerformed
        double numAleatorio = Double.valueOf(campoNumeroAleatorio.getText());
        String color = "";
        int numero = 1;
        
        DefaultTableModel model = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
         
        int rowCount = model.getRowCount();
        if (rowCount > 0) {
            numero = rowCount + 1;
        }
        
        for (int i = 0; i < modelDistribuciones.getRowCount(); i++) {
        double rangoInferior = (double) modelDistribuciones.getValueAt(i, 1);
        double rangoSuperior = (double) modelDistribuciones.getValueAt(i, 2);
        String colorAsignado = (String) modelDistribuciones.getValueAt(i, 3);

            if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
              color = colorAsignado;
             break; // Detenerse cuando encuentra el color correspondiente
            }
        }
            model.addRow(new Object[]{numero, numAleatorio, color});

            campoNumeroAleatorio.setText("");
        
    }//GEN-LAST:event_btnIngresarNroAleatorioActionPerformed

    private void campoDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoDistribucionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoDistribucionActionPerformed

    private void btnIngresarDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarDistribucionActionPerformed
        double distribucionAcum = 0.0;
        double distribucion = Double.valueOf(campoDistribucion.getText());
        String color = String.valueOf(campoColor.getText());
        
        DefaultTableModel model = (DefaultTableModel) tablaDistribuciones.getModel();
        distribucionAcum = distribucion;
        
        double rangoInferior = 0.0; // Ajusta esto según la lógica de tu aplicación
        double rangoSuperior = distribucion;
        
        int rowCount = model.getRowCount();
        if (rowCount > 0) {
            
            double anteriorAcum = (double) model.getValueAt(rowCount - 1, 0);
            double rangoSuperiorAnterior = (double) model.getValueAt(rowCount - 1, 2);
            rangoInferior = rangoSuperiorAnterior;
            distribucionAcum = anteriorAcum + distribucion;
            rangoSuperior = distribucionAcum;
        }
        
        distribucionAcum = Math.round(distribucionAcum * 100.0) / 100.0;
        rangoInferior = Math.round(rangoInferior * 100.0) / 100.0;
        rangoSuperior = Math.round(rangoSuperior * 100.0) / 100.0;

         model.addRow(new Object[]{distribucionAcum, rangoInferior, rangoSuperior, color});
         campoDistribucion.setText("");
         campoColor.setText("");
        
    }//GEN-LAST:event_btnIngresarDistribucionActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        DefaultTableModel modelDistribuciones = (DefaultTableModel) tablaDistribuciones.getModel();
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();

        modelDistribuciones.setRowCount(0);
        modelFinal.setRowCount(0);
        
        areaConclusion.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void limpiarTablaSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaSimulacionActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        modelFinal.setRowCount(0);
    }//GEN-LAST:event_limpiarTablaSimulacionActionPerformed

    private void btnIngresarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCantidadActionPerformed
        try {
        int cantidad = Integer.parseInt(campoCantidad.getText()); // Obtener la cantidad ingresada
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelDistribucion = (DefaultTableModel) tablaDistribuciones.getModel();

        for (int i = 0; i < cantidad; i++) {
            double numAleatorio = Math.round(Math.random() * 100.0) / 100.0; // Generar número aleatorio entre 0 y 1 con 2 decimales
            String color = "Sin asignar"; // Valor por defecto en caso de no encontrar un rango válido

            // Buscar el color correspondiente en la tablaDistribuciones
            for (int j = 0; j < modelDistribucion.getRowCount(); j++) {
                double rangoInferior = (double) modelDistribucion.getValueAt(j, 1);
                double rangoSuperior = (double) modelDistribucion.getValueAt(j, 2);

                if (numAleatorio >= rangoInferior && numAleatorio < rangoSuperior) {
                    color = (String) modelDistribucion.getValueAt(j, 3); // Asignar el color correspondiente
                    break; // Terminar la búsqueda cuando encuentre el color
                }
            }

            // Agregar la fila a la tablaFinal
            modelFinal.addRow(new Object[]{i + 1, numAleatorio, color});
        }

        campoCantidad.setText(""); // Limpiar el campo de entrada
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnIngresarCantidadActionPerformed

    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        DefaultTableModel modelFinal = (DefaultTableModel) tablaFinal.getModel();
    HashMap<String, Integer> conteoColores = new HashMap<>();

    int totalDatos = modelFinal.getRowCount();

    // Contar los colores en la tablaFinal
    for (int i = 0; i < totalDatos; i++) {
        String color = (String) modelFinal.getValueAt(i, 2);
        conteoColores.put(color, conteoColores.getOrDefault(color, 0) + 1);
    }

    // Construir la conclusión
    StringBuilder conclusion = new StringBuilder();
    conclusion.append("En los ").append(totalDatos).append(" datos generados se hallaron:\n\n");

    for (Map.Entry<String, Integer> entry : conteoColores.entrySet()) {
        conclusion.append(entry.getValue()).append(" números de color ").append(entry.getKey()).append("\n");
    }

    // Mostrar el resultado en el área de texto
    areaConclusion.setText(conclusion.toString());
    }//GEN-LAST:event_btnEvaluarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JTextArea areaConclusion;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnIngresarCantidad;
    private javax.swing.JButton btnIngresarDistribucion;
    private javax.swing.JButton btnIngresarNroAleatorio;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JTextField campoCantidad;
    private javax.swing.JTextField campoColor;
    private javax.swing.JTextField campoDistribucion;
    private javax.swing.JTextField campoNumeroAleatorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarTablaSimulacion;
    private javax.swing.JTable tablaDistribuciones;
    private javax.swing.JTable tablaFinal;
    // End of variables declaration//GEN-END:variables
}
