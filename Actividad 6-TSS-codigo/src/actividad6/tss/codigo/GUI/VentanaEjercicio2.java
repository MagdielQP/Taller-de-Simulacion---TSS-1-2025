
package actividad6.tss.codigo.GUI;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.distribution.TDistribution;

public class VentanaEjercicio2 extends javax.swing.JPanel {

    public VentanaEjercicio2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textLoteRepuesto = new javax.swing.JTextField();
        textTamLote = new javax.swing.JTextField();
        btnEjemplo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnCrearTabla = new javax.swing.JButton();
        btnGenerador = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaEstadisticos = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        textCostoPieza = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        textCostoFalla = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        textCostoInspeccion = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        textExponencial = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        textParamComparacion = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCostoPromedio = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaEstadisticos1 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(890, 560));

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));
        PanelEjercicio1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelEjercicio1.setPreferredSize(new java.awt.Dimension(3800, 1650));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EJERCICIO 2 - LOS ANGELES");

        jLabel10.setText("-------------------------------------------------");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("DATOS");

        textLoteRepuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLoteRepuestoActionPerformed(evt);
            }
        });

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        jLabel7.setText("TABLA SIMULACION 1");

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Semana", "Tam. Lote", "Rn", "% defectos lote", "Nro defectuosos", "Pieza 1", "Pieza 2", "Pieza 3", "Pieza 4", "Pieza 5", "Pieza 6", "Pieza 7", "Pieza 8", "Pieza 9", "Pieza 10", "Pieza 11", "Pieza 12", "Pieza 13", "Pieza 14", "Pieza 15", "Pieza 16", "Pieza 17", "Pieza 18", "Pieza 19", "Pieza 20", "Pieza 21", "Pieza 22", "Pieza 23", "Pieza 24", "Pieza 25", "defect en D", "comp C", "¿SE ACEPTA?", "Costo Insp.", "Costo Fallas", "Costo Rep.", "Costo Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaFinal);

        btnLimpiar.setText("Vaciar Todo");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCrearTabla.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnCrearTabla.setText("CREAR TABLA");
        btnCrearTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearTablaActionPerformed(evt);
            }
        });

        btnGenerador.setText("Generar");
        btnGenerador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneradorActionPerformed(evt);
            }
        });

        tablaEstadisticos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"PROMEDIO", null},
                {"DESVIACION", null},
                {"MIN", null},
                {"MAX", null}
            },
            new String [] {
                "", "ESTADISTICOS"
            }
        ));
        jScrollPane4.setViewportView(tablaEstadisticos);

        jLabel19.setText("Tamaño de lote:");

        jLabel20.setText("Lote de respuesto:");

        jLabel11.setText("costo por pieza");

        textCostoPieza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCostoPiezaActionPerformed(evt);
            }
        });

        jLabel12.setText("costo por falla");

        textCostoFalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCostoFallaActionPerformed(evt);
            }
        });

        jLabel13.setText("costo inspeccion");

        textCostoInspeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCostoInspeccionActionPerformed(evt);
            }
        });

        jLabel21.setText("Distr. Exponencial");

        jLabel22.setText("P.comparacion C:");

        tablaCostoPromedio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro", "COSTO TOTAL PROMEDIO"
            }
        ));
        jScrollPane3.setViewportView(tablaCostoPromedio);

        tablaEstadisticos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"PROMEDIO", null},
                {"DESVIACION", null},
                {"MIN", null},
                {"MAX", null}
            },
            new String [] {
                "", "ESTADISTICOS"
            }
        ));
        jScrollPane5.setViewportView(tablaEstadisticos1);

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(0, 48, Short.MAX_VALUE)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textCostoInspeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                            .addComponent(jLabel22)
                                            .addGap(26, 26, 26)
                                            .addComponent(textParamComparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(30, 30, 30)
                                                .addComponent(textCostoFalla, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                        .addComponent(jLabel19)
                                                        .addGap(26, 26, 26))
                                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                        .addComponent(jLabel20)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(textLoteRepuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(textTamLote, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addGap(26, 26, 26)
                                                .addComponent(textExponencial, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textCostoPieza, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnEjemplo))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCrearTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(btnGenerador, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(btnLimpiar)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 3352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(540, 540, 540)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(862, 862, 862))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(btnEjemplo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textCostoPieza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textCostoInspeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textCostoFalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(textLoteRepuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(textTamLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(textExponencial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(textParamComparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(btnGenerador, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCrearTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1114, 1114, 1114))))
        );

        jScrollPane1.setViewportView(PanelEjercicio1);
        PanelEjercicio1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 3494, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGeneradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneradorActionPerformed
        try {
            Random rand = new Random();

            // Generar valores aleatorios dentro de los rangos especificados
            double costoPieza = 1 + (10 - 1) * rand.nextDouble(); // Entre 1 y 10
            double costoInspeccion = Math.round((0 + (2 - 0) * rand.nextDouble()) * 10000.0) / 10000.0; // Entre 0 y 2 con 4 decimales
            double costoFalla = 15 + (45 * rand.nextDouble()); // Entre 15 y 60
            double loteRepuesto = 5000 + (rand.nextInt(36) * 1000); // Entre 5000 y 40000 de 1000 en 1000
            int tamLote = 500 + (rand.nextInt(40) * 500); // Entre 500 y 20000 de 500 en 500
            double exponencial = 0.04916; // Valor fijo
            int paramComparacion = 2 + rand.nextInt(9); // Entre 2 y 10
            
            //desviacionInspeccion = Math.round(desviacionInspeccion * 1000.0) / 1000.0;
            // Asignar valores a los textFields
            textCostoPieza.setText(String.valueOf(costoPieza));
            textCostoInspeccion.setText(String.valueOf(costoInspeccion));
            textCostoFalla.setText(String.valueOf(costoFalla));
            textLoteRepuesto.setText(String.valueOf(loteRepuesto));
            textTamLote.setText(String.valueOf(tamLote));
            textExponencial.setText(String.valueOf(exponencial));
            textParamComparacion.setText(String.valueOf(paramComparacion));

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGeneradorActionPerformed

    private void btnCrearTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearTablaActionPerformed
        try {
            // Obtener los valores de los TextFields
            double costoPieza = Double.parseDouble(textCostoPieza.getText());
            double costoInspeccion = Double.parseDouble(textCostoInspeccion.getText());
            double costoFalla = Double.parseDouble(textCostoFalla.getText());
            double loteRepuesto = Double.parseDouble(textLoteRepuesto.getText());
            int tamLote = Integer.parseInt(textTamLote.getText());
            double exponencial = Double.parseDouble(textExponencial.getText());
            int paramComparacion = Integer.parseInt(textParamComparacion.getText());

            // Crear el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tablaFinal.getModel();

            // Limpiar la tabla antes de agregar nuevas filas
            modelo.setRowCount(0);

            // Llenar la tabla con 100 filas
            for (int i = 1; i <= 100; i++) {
                // Generar número aleatorio entre 0 y 1
                double nroAleatorio = Math.random();

                // Columna 4: Evaluación usando la fórmula
                double col4 = -exponencial * Math.log(1 - nroAleatorio);
                col4 = Math.round(col4 * 10000.0) / 10000.0; // Redondear a 4 decimales

                // Columna 5: Multiplicación de tamLote por col4
                int col5 = (int) (tamLote * col4);

                // Columnas 6 a 30: Evaluar cada columna con un nuevo número aleatorio
                int col6 = (Math.random() <= col4) ? 1 : 0;
                int col7 = (Math.random() <= col4) ? 1 : 0;
                int col8 = (Math.random() <= col4) ? 1 : 0;
                int col9 = (Math.random() <= col4) ? 1 : 0;
                int col10 = (Math.random() <= col4) ? 1 : 0;
                int col11 = (Math.random() <= col4) ? 1 : 0;
                int col12 = (Math.random() <= col4) ? 1 : 0;
                int col13 = (Math.random() <= col4) ? 1 : 0;
                int col14 = (Math.random() <= col4) ? 1 : 0;
                int col15 = (Math.random() <= col4) ? 1 : 0;
                int col16 = (Math.random() <= col4) ? 1 : 0;
                int col17 = (Math.random() <= col4) ? 1 : 0;
                int col18 = (Math.random() <= col4) ? 1 : 0;
                int col19 = (Math.random() <= col4) ? 1 : 0;
                int col20 = (Math.random() <= col4) ? 1 : 0;
                int col21 = (Math.random() <= col4) ? 1 : 0;
                int col22 = (Math.random() <= col4) ? 1 : 0;
                int col23 = (Math.random() <= col4) ? 1 : 0;
                int col24 = (Math.random() <= col4) ? 1 : 0;
                int col25 = (Math.random() <= col4) ? 1 : 0;
                int col26 = (Math.random() <= col4) ? 1 : 0;
                int col27 = (Math.random() <= col4) ? 1 : 0;
                int col28 = (Math.random() <= col4) ? 1 : 0;
                int col29 = (Math.random() <= col4) ? 1 : 0;
                int col30 = (Math.random() <= col4) ? 1 : 0;

                // Columna 31: Sumar los valores de las columnas 6 a 30
                int col31 = col6 + col7 + col8 + col9 + col10 + col11 + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20 + col21 + col22 + col23 + col24 + col25 + col26 + col27 + col28 + col29 + col30;

                // Columna 32: Colocar el valor de textParamComparacion
                int col32 = paramComparacion;

                // Columna 33: Comparación de col31 con col32
                String col33 = "No";
                if (col31 <= col32) {
                    col33 = "Si";
                }

                // Columna 34: Calcular el costo
                double col34 = 25 * (costoPieza + costoInspeccion);

                // Columna 35: Evaluar si col33 es "Si"
                double col35 = 0;
                if (col33.equals("Si")) {
                    col35 = col4 * costoFalla;
                }

                // Columna 36: Evaluar si col33 es "No"
                double col36 = 0;
                if (col33.equals("No")) {
                    col36 = loteRepuesto;
                }

                // Columna 37: Sumar columnas 34, 35 y 36
                double col37 = col34 + col35 + col36;

                // Crear una fila con todos los valores calculados
                Object[] fila = new Object[37];
                fila[0] = i; // Columna 1: Índice
                fila[1] = tamLote; // Columna 2: textTamLote
                fila[2] = nroAleatorio; // Columna 3: Número aleatorio
                fila[3] = col4; // Columna 4: Evaluación
                fila[4] = col5; // Columna 5: Multiplicación
                fila[5] = col6; // Columna 6
                fila[6] = col7; // Columna 7
                fila[7] = col8; // Columna 8
                fila[8] = col9; // Columna 9
                fila[9] = col10; // Columna 10
                fila[10] = col11; // Columna 11
                fila[11] = col12; // Columna 12
                fila[12] = col13; // Columna 13
                fila[13] = col14; // Columna 14
                fila[14] = col15; // Columna 15
                fila[15] = col16; // Columna 16
                fila[16] = col17; // Columna 17
                fila[17] = col18; // Columna 18
                fila[18] = col19; // Columna 19
                fila[19] = col20; // Columna 20
                fila[20] = col21; // Columna 21
                fila[21] = col22; // Columna 22
                fila[22] = col23; // Columna 23
                fila[23] = col24; // Columna 24
                fila[24] = col25; // Columna 25
                fila[25] = col26; // Columna 26
                fila[26] = col27; // Columna 27
                fila[27] = col28; // Columna 28
                fila[28] = col29; // Columna 29
                fila[29] = col30; // Columna 30
                fila[30] = col31; // Columna 31: Suma de columnas 6 a 30
                fila[31] = col32; // Columna 32: textParamComparacion
                fila[32] = col33; // Columna 33: Comparación
                fila[33] = col34; // Columna 34: Costo
                fila[34] = col35; // Columna 35: Evaluación de falla
                fila[35] = col36; // Columna 36: Repuesto
                fila[36] = col37; // Columna 37: Suma final

                // Agregar la fila a la tabla
                modelo.addRow(fila);
            }
            
            calcularEstadisticos();
            calcularPromediosAcumulativos();
            calcularEstadisticosPromedios();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCrearTablaActionPerformed

    private void calcularEstadisticos() {
        DefaultTableModel modeloFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modeloEstadisticos = (DefaultTableModel) tablaEstadisticos.getModel();

        ArrayList<Double> valores = new ArrayList<>();

        // Extraer los valores de la última columna (Tiempo total de permanencia)
        int rowCount = modeloFinal.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String valorStr = modeloFinal.getValueAt(i, 36).toString(); // Última columna (10)
            valores.add(Double.parseDouble(valorStr));
        }

        // Calcular promedio
        double suma = 0;
        for (double v : valores) suma += v;
        double promedio = suma / valores.size();

        // Calcular varianza muestral
        double sumatoriaVarianza = 0;
        for (double v : valores) sumatoriaVarianza += Math.pow(v - promedio, 2);

        // Se divide por (N - 1) en lugar de N para obtener varianza muestral
        double varianzaMuestral = sumatoriaVarianza / (valores.size() - 1);

        // Desviación estándar muestral es la raíz cuadrada de la varianza muestral
        double desviacionMuestral = Math.sqrt(varianzaMuestral);

        // Obtener mínimo y máximo
        double min = valores.stream().min(Double::compareTo).orElse(0.0);
        double max = valores.stream().max(Double::compareTo).orElse(0.0);

        // Llenar la tabla estadística
        modeloEstadisticos.setRowCount(0); // Limpiar la tabla
        modeloEstadisticos.addRow(new Object[]{"Promedio", String.format("%.4f", promedio)});
        modeloEstadisticos.addRow(new Object[]{"Desviación", String.format("%.4f", desviacionMuestral)});
        modeloEstadisticos.addRow(new Object[]{"Mínimo", String.format("%.4f", min)});
        modeloEstadisticos.addRow(new Object[]{"Máximo", String.format("%.4f", max)});
    }
    
    private void calcularPromediosAcumulativos() {
        DefaultTableModel modeloFinal = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modeloCostoPromedio = (DefaultTableModel) tablaCostoPromedio.getModel();

        int rowCount = modeloFinal.getRowCount();
        if (rowCount == 0) return; // Si no hay datos, salir

        double sumaAcumulada = 0; // Variable para acumular la suma de los valores
        modeloCostoPromedio.setRowCount(0); // Limpiar la tabla antes de llenarla

        // Recorrer las filas de tablaFinal y calcular el promedio acumulado
        for (int i = 0; i < rowCount; i++) {
            Object valorObj = modeloFinal.getValueAt(i, 36); // Obtener el valor de la última columna
            if (valorObj != null) {
                try {
                    double valor = Double.parseDouble(valorObj.toString());
                    sumaAcumulada += valor; // Acumular el valor
                    double promedioAcumulado = sumaAcumulada / (i + 1); // Calcular promedio acumulativo

                    // Agregar fila con el índice y el promedio acumulativo
                    modeloCostoPromedio.addRow(new Object[]{i + 1, String.format("%.4f", promedioAcumulado)});
                } catch (NumberFormatException e) {
                    System.err.println("Error al convertir el valor en fila " + i + ": " + valorObj);
                }
            }
        }
    }
    
    private void calcularEstadisticosPromedios() {
        DefaultTableModel modeloFinal = (DefaultTableModel) tablaCostoPromedio.getModel();
        DefaultTableModel modeloEstadisticos = (DefaultTableModel) tablaEstadisticos1.getModel();

        ArrayList<Double> valores = new ArrayList<>();

        // Extraer los valores de la última columna (Tiempo total de permanencia)
        int rowCount = modeloFinal.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String valorStr = modeloFinal.getValueAt(i, 1).toString(); // Última columna (10)
            valores.add(Double.parseDouble(valorStr));
        }

        // Calcular promedio
        double suma = 0;
        for (double v : valores) suma += v;
        double promedio = suma / valores.size();

        // Calcular varianza muestral
        double sumatoriaVarianza = 0;
        for (double v : valores) sumatoriaVarianza += Math.pow(v - promedio, 2);

        // Se divide por (N - 1) en lugar de N para obtener varianza muestral
        double varianzaMuestral = sumatoriaVarianza / (valores.size() - 1);

        // Desviación estándar muestral es la raíz cuadrada de la varianza muestral
        double desviacionMuestral = Math.sqrt(varianzaMuestral);

        // Obtener mínimo y máximo
        double min = valores.stream().min(Double::compareTo).orElse(0.0);
        double max = valores.stream().max(Double::compareTo).orElse(0.0);

        // Llenar la tabla estadística
        modeloEstadisticos.setRowCount(0); // Limpiar la tabla
        modeloEstadisticos.addRow(new Object[]{"Promedio", String.format("%.4f", promedio)});
        modeloEstadisticos.addRow(new Object[]{"Desviación", String.format("%.4f", desviacionMuestral)});
        modeloEstadisticos.addRow(new Object[]{"Mínimo", String.format("%.4f", min)});
        modeloEstadisticos.addRow(new Object[]{"Máximo", String.format("%.4f", max)});
    }
    
    // Método para calcular el promedio
    private double calcularPromedio(double[] datos) {
        double suma = 0;
        for (double valor : datos) {
            suma += valor;
        }
        return suma / datos.length;
    }
    

    // Método para calcular la desviación estándar muestral
    private double calcularDesviacionEstandarMuestral(double[] datos) {
        int n = datos.length;
        if (n < 2) return 0; // No se puede calcular con menos de 2 datos

        double suma = 0;
        double sumaCuadrados = 0;
        double res = 0;

        for (double valor : datos) {
            suma += valor;
        }

        double media = suma / n;

        for (double valor : datos) {
            sumaCuadrados += Math.pow(valor - media, 2);
        }
        
        res = Math.sqrt(sumaCuadrados / (n - 1));

        return res; // Se divide por (n - 1) para la muestra
    }

    // Método para calcular la desviación estándar poblacional (para futuras implementaciones)
    private double calcularDesviacionEstandarPoblacional(double[] datos) {
        int n = datos.length;
        if (n == 0) return 0;

        double suma = 0;
        double sumaCuadrados = 0;

        for (double valor : datos) {
            suma += valor;
        }

        double media = suma / n;

        for (double valor : datos) {
            sumaCuadrados += Math.pow(valor - media, 2);
        }

        return Math.sqrt(sumaCuadrados / n); // Se divide por "n" en lugar de "n-1"
    }
    
    
    
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        DefaultTableModel model1 = (DefaultTableModel) tablaFinal.getModel();
        DefaultTableModel modelEstadisticos = (DefaultTableModel) tablaEstadisticos.getModel();
        DefaultTableModel modelCosto = (DefaultTableModel) tablaCostoPromedio.getModel();
        DefaultTableModel modelEstadisticos1 = (DefaultTableModel) tablaEstadisticos1.getModel();
            
        model1.setRowCount(0);
        modelEstadisticos.setRowCount(0);
        modelCosto.setRowCount(0);
        modelEstadisticos1.setRowCount(0);

        
        textCostoPieza.setText(String.valueOf(""));
        textCostoInspeccion.setText(String.valueOf(""));
        textCostoFalla.setText(String.valueOf(""));
        textLoteRepuesto.setText(String.valueOf(""));
        textTamLote.setText(String.valueOf(""));
        textExponencial.setText(String.valueOf(""));
        textParamComparacion.setText(String.valueOf(""));
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        textCostoPieza.setText(String.valueOf(2.0));
        textCostoInspeccion.setText(String.valueOf(0.5));
        textCostoFalla.setText(String.valueOf(25.0));
        textLoteRepuesto.setText(String.valueOf(30000.0));
        textTamLote.setText(String.valueOf(10000));
        textExponencial.setText(String.valueOf(0.04916));
        textParamComparacion.setText(String.valueOf(3));

    }//GEN-LAST:event_btnEjemploActionPerformed

    private void textLoteRepuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLoteRepuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textLoteRepuestoActionPerformed

    private void textCostoPiezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCostoPiezaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCostoPiezaActionPerformed

    private void textCostoFallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCostoFallaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCostoFallaActionPerformed

    private void textCostoInspeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCostoInspeccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCostoInspeccionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JButton btnCrearTabla;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnGenerador;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tablaCostoPromedio;
    private javax.swing.JTable tablaEstadisticos;
    private javax.swing.JTable tablaEstadisticos1;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTextField textCostoFalla;
    private javax.swing.JTextField textCostoInspeccion;
    private javax.swing.JTextField textCostoPieza;
    private javax.swing.JTextField textExponencial;
    private javax.swing.JTextField textLoteRepuesto;
    private javax.swing.JTextField textParamComparacion;
    private javax.swing.JTextField textTamLote;
    // End of variables declaration//GEN-END:variables
}
