
package actividad_8.tss.codigo.GUI;

import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
//import org.apache.commons.math3.distribution.NormalDistribution;
//import org.apache.commons.math3.distribution.TDistribution;

public class VentanaEjercicio1 extends javax.swing.JPanel {

    public VentanaEjercicio1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        PanelEjercicio1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textPuntoReorden = new javax.swing.JTextField();
        textInvInicial = new javax.swing.JTextField();
        btnEjemplo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        btnCrearTabla = new javax.swing.JButton();
        btnGenerador = new javax.swing.JButton();
        textPlazoEntrega = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaEstadisticos = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        textCantPedido = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        textCostoPedido = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        textCostoMante = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        textCostoVentasPerd = new javax.swing.JTextField();
        btnGraficarEjercico1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(890, 560));

        PanelEjercicio1.setBackground(new java.awt.Color(102, 102, 102));
        PanelEjercicio1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelEjercicio1.setPreferredSize(new java.awt.Dimension(2100, 1650));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EJERCICIO 1 - SISTEMA DE INVENTARIOS");

        jLabel10.setText("-------------------------------------------------");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("DATOS");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel9.setText("COSTOS");

        textPuntoReorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPuntoReordenActionPerformed(evt);
            }
        });

        btnEjemplo.setText("Ejercicio de Ejemplo");
        btnEjemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjemploActionPerformed(evt);
            }
        });

        jLabel7.setText("TABLA SIMULACION 1");

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Semanas", "Pos.ini.Inv", "Inv. Inicial", "¿Pedido recibido?", "U. Recibidas", "Demanda", "Fin Inventario", "Ventas perdidas", "¿Pedido Realizado?", "Pos. Inv. Final", "Sem. Vencimiento", "Costo Retencion", "Costo Pedido", "Costo Corto", "Costo Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaFinal);

        btnCrearTabla.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnCrearTabla.setText("CREAR TABLA");
        btnCrearTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearTablaActionPerformed(evt);
            }
        });

        btnGenerador.setText("Generar");
        btnGenerador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneradorActionPerformed(evt);
            }
        });

        textPlazoEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPlazoEntregaActionPerformed(evt);
            }
        });

        tablaEstadisticos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"COSTO RETENCION", null},
                {"COSTO DE PEDIDO", null},
                {"COSTO CORTO", null},
                {"COSTO TOTAL", null}
            },
            new String [] {
                "DETALLE", "VALOR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaEstadisticos);

        jLabel19.setText("Inventario Inicial");

        jLabel20.setText("Punto de reorden:");

        jLabel21.setText("Plazo de entrega:");

        jLabel11.setText("Cantidad de pedido:");

        textCantPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCantPedidoActionPerformed(evt);
            }
        });

        jLabel22.setText("Costo de pedido");

        textCostoPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCostoPedidoActionPerformed(evt);
            }
        });

        jLabel23.setText("Costo de Mant.");

        jLabel24.setText("Costo V. Perdidas:");

        textCostoVentasPerd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCostoVentasPerdActionPerformed(evt);
            }
        });

        btnGraficarEjercico1.setText("Graficar");
        btnGraficarEjercico1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarEjercico1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelEjercicio1Layout = new javax.swing.GroupLayout(PanelEjercicio1);
        PanelEjercicio1.setLayout(PanelEjercicio1Layout);
        PanelEjercicio1Layout.setHorizontalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnEjemplo))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel19)
                                                    .addComponent(jLabel21)))
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textCantPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(textInvInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(textPuntoReorden, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(textPlazoEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(btnCrearTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabel24))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel23)
                                                .addComponent(jLabel22)))
                                        .addGap(18, 18, 18)
                                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(textCostoMante, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(textCostoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(textCostoVentasPerd, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 103, Short.MAX_VALUE))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(jLabel9))
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(btnGenerador, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(btnGraficarEjercico1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1520, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        PanelEjercicio1Layout.setVerticalGroup(
            PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEjercicio1Layout.createSequentialGroup()
                        .addComponent(btnEjemplo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addComponent(textCantPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textPuntoReorden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textInvInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textPlazoEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(textCostoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(textCostoMante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCostoVentasPerd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerador, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelEjercicio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnCrearTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(PanelEjercicio1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnGraficarEjercico1)))
                .addGap(43, 43, 43))
        );

        jScrollPane1.setViewportView(PanelEjercicio1);
        PanelEjercicio1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1904, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textPlazoEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPlazoEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPlazoEntregaActionPerformed

    private void btnGeneradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneradorActionPerformed
        Random rand = new Random();

        // Cantidad de pedido: enteros de 50 a 500, de 10 en 10
        int cantPedido = 50 + rand.nextInt((500 - 50) / 10 + 1) * 10;
        textCantPedido.setText(String.valueOf(cantPedido));

        // Punto de reorden: enteros de 50 a 500, de 10 en 10
        int puntoReorden = 50 + rand.nextInt((500 - 50) / 10 + 1) * 10;
        textPuntoReorden.setText(String.valueOf(puntoReorden));

        // Inventario inicial = cantidad de pedido
        textInvInicial.setText(String.valueOf(cantPedido));

        // Plazo de entrega: enteros entre 1 y 4
        int plazoEntrega = 1 + rand.nextInt(4);
        textPlazoEntrega.setText(String.valueOf(plazoEntrega));

        // Costo de pedido: enteros de 20 a 150, de 10 en 10
        int costoPedido = 20 + rand.nextInt((150 - 20) / 10 + 1) * 10;
        textCostoPedido.setText(String.valueOf(costoPedido));

        // Costo de mantenimiento: double entre 0.1 y 0.9
        double costoMante = 0.1 + (0.9 - 0.1) * rand.nextDouble();
        textCostoMante.setText(String.format(Locale.US, "%.2f", costoMante));

        // Costo de ventas perdidas: enteros de 20 a 170, de 10 en 10
        int costoVentasPerd = 20 + rand.nextInt((170 - 20) / 10 + 1) * 10;
        textCostoVentasPerd.setText(String.valueOf(costoVentasPerd));
    }//GEN-LAST:event_btnGeneradorActionPerformed

    private void btnCrearTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearTablaActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaFinal.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

        try {
            int cantPedido = Integer.parseInt(textCantPedido.getText());
            int puntoReorden = Integer.parseInt(textPuntoReorden.getText());
            int inventarioIni = Integer.parseInt(textInvInicial.getText());
            int plazoEntrega = Integer.parseInt(textPlazoEntrega.getText());

            int costoPedido = Integer.parseInt(textCostoPedido.getText());
            double costoMantenimiento = Double.parseDouble(textCostoMante.getText());
            int costoVentasPerdidas = Integer.parseInt(textCostoVentasPerd.getText());

            // Crear Poisson para demanda
            PoissonDistribution poisson = new PoissonDistribution(100);

            List<Integer> semanasPedido = new ArrayList<>();

            for (int semana = 1; semana <= 52; semana++) {
                Object[] fila = new Object[15];

                // Semana
                fila[0] = semana;

                // Columna 1: Posición inicial inventario
                int posicionInicial;
                if (semana == 1) {
                    posicionInicial = inventarioIni;
                } else {
                    posicionInicial = (int) tablaFinal.getValueAt(semana - 2, 9); // columna 9 = Posición inventario final anterior
                }
                fila[1] = posicionInicial;

                // Columna 2: Inventario al inicio
                int inicioInventario = semana == 1 ? inventarioIni : (int) tablaFinal.getValueAt(semana - 2, 6); // Fin Inversión
                fila[2] = inicioInventario;

                // Columna 3: ¿Pedido recibido?
                boolean pedidoRecibido = semanasPedido.contains(semana);
                fila[3] = pedidoRecibido;

                // Columna 4: Unidades recibidas
                int unidadesRecibidas = pedidoRecibido ? cantPedido : 0;
                fila[4] = unidadesRecibidas;

                // Columna 5: Demanda (Poisson)
                int demanda = poisson.sample();
                fila[5] = demanda;

                // Columna 6: Fin inversión
                int finInversion = Math.max(0, inicioInventario - demanda + unidadesRecibidas);
                fila[6] = finInversion;

                // Columna 7: Ventas perdidas
                int ventasPerdidas = 0;
                if (demanda > (inicioInventario + unidadesRecibidas)) {
                    ventasPerdidas = (inicioInventario + unidadesRecibidas >= 0) ? demanda - (inicioInventario + unidadesRecibidas) : demanda;
                }
                fila[7] = ventasPerdidas;

                // Columna 8: ¿Pedido realizado?
                boolean pedidoRealizado = (posicionInicial - demanda) <= puntoReorden;
                fila[8] = pedidoRealizado;

                // Columna 9: Posición de inventario final
                int posInventarioFinal = posicionInicial - demanda + ventasPerdidas + (pedidoRealizado ? cantPedido : 0);
                fila[9] = posInventarioFinal;

                // Columna 10: Semana de vencimiento
                Integer semanaVencimiento = pedidoRealizado ? semana + plazoEntrega + 1 : null;
                fila[10] = semanaVencimiento;

                if (semanaVencimiento != null) semanasPedido.add(semanaVencimiento);

                // Columna 11: Costo de retención
                double costoRet = Math.max(0, finInversion * costoMantenimiento);
                fila[11] = String.format("$ %.2f", costoRet);

                // Columna 12: Costo de pedido
                int costoPed = pedidoRealizado ? costoPedido : 0;
                fila[12] = String.format("$ %d", costoPed);

                // Columna 13: Costo de ventas perdidas
                int costoVP = ventasPerdidas * costoVentasPerdidas;
                fila[13] = String.format("$ %d", costoVP);

                // Columna 14: Costo total
                double total = costoRet + costoPed + costoVP;
                fila[14] = String.format("$ %.2f", total);

                modelo.addRow(fila);
            }
            calcularEstadisticos();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCrearTablaActionPerformed

    private void calcularEstadisticos() {
    DefaultTableModel modeloFinal = (DefaultTableModel) tablaFinal.getModel();
    DefaultTableModel modeloEstadisticos = (DefaultTableModel) tablaEstadisticos.getModel();

    double sumaC11 = 0, sumaC12 = 0, sumaC13 = 0, sumaC14 = 0;

    int rowCount = modeloFinal.getRowCount();

    for (int i = 0; i < rowCount; i++) {
        String valorStrC11 = modeloFinal.getValueAt(i, 11).toString().replace("$", "").trim();
        String valorStrC12 = modeloFinal.getValueAt(i, 12).toString().replace("$", "").trim();
        String valorStrC13 = modeloFinal.getValueAt(i, 13).toString().replace("$", "").trim();
        String valorStrC14 = modeloFinal.getValueAt(i, 14).toString().replace("$", "").trim();

        try {
            double valC11 = Double.parseDouble(valorStrC11);
            double valC12 = Double.parseDouble(valorStrC12);
            double valC13 = Double.parseDouble(valorStrC13);
            double valC14 = Double.parseDouble(valorStrC14);

            sumaC11 += valC11;
            sumaC12 += valC12;
            sumaC13 += valC13;
            sumaC14 += valC14;

        } catch (NumberFormatException e) {
            System.err.println("Error en la fila " + i + ": " + e.getMessage());
        }
    }

    //double promedioC11 = sumaC11 / rowCount;
    //double promedioC12 = sumaC12 / rowCount;
    //double promedioC13 = sumaC13 / rowCount;
    //double promedioC14 = sumaC14 / rowCount;

    modeloEstadisticos.setRowCount(0); // Limpiar la tabla
    modeloEstadisticos.addRow(new Object[]{"Costo Retención", String.format("%.2f", sumaC11)});
    modeloEstadisticos.addRow(new Object[]{"Costo Pedido", String.format("%.2f", sumaC12)});
    modeloEstadisticos.addRow(new Object[]{"Costo Corto", String.format("%.2f", sumaC13)});
    modeloEstadisticos.addRow(new Object[]{"Costo Total", String.format("%.2f", sumaC14)});
}

    
    // Método para calcular el promedio
    private double calcularPromedio(double[] datos) {
        double suma = 0;
        for (double valor : datos) {
            suma += valor;
        }
        return suma / datos.length;
    }
    

    // Método para calcular la desviación estándar muestral
    private double calcularDesviacionEstandarMuestral(double[] datos) {
        int n = datos.length;
        if (n < 2) return 0; // No se puede calcular con menos de 2 datos

        double suma = 0;
        double sumaCuadrados = 0;
        double res = 0;

        for (double valor : datos) {
            suma += valor;
        }

        double media = suma / n;

        for (double valor : datos) {
            sumaCuadrados += Math.pow(valor - media, 2);
        }
        
        res = Math.sqrt(sumaCuadrados / (n - 1));

        return res; // Se divide por (n - 1) para la muestra
    }

    // Método para calcular la desviación estándar poblacional (para futuras implementaciones)
    private double calcularDesviacionEstandarPoblacional(double[] datos) {
        int n = datos.length;
        if (n == 0) return 0;

        double suma = 0;
        double sumaCuadrados = 0;

        for (double valor : datos) {
            suma += valor;
        }

        double media = suma / n;

        for (double valor : datos) {
            sumaCuadrados += Math.pow(valor - media, 2);
        }

        return Math.sqrt(sumaCuadrados / n); // Se divide por "n" en lugar de "n-1"
    }
    
    
    
    private void btnEjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjemploActionPerformed
        textCantPedido.setText(String.valueOf(250));
        textPuntoReorden.setText(String.valueOf(250));
        textInvInicial.setText(String.valueOf(250));
        textPlazoEntrega.setText(String.valueOf(2));
        
        textCostoPedido.setText(String.valueOf(50));
        textCostoMante.setText(String.valueOf(0.20));
        textCostoVentasPerd.setText(String.valueOf(100));

    }//GEN-LAST:event_btnEjemploActionPerformed

    private void textPuntoReordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPuntoReordenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPuntoReordenActionPerformed

    private void textCantPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCantPedidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCantPedidoActionPerformed

    private void textCostoPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCostoPedidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCostoPedidoActionPerformed

    private void textCostoVentasPerdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCostoVentasPerdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCostoVentasPerdActionPerformed

    private void btnGraficarEjercico1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarEjercico1ActionPerformed
        int iteraciones = 100; // Puedes ajustar a 50 o más
        java.util.List<Double> valoresCostoTotal = new ArrayList<>();

        for (int i = 0; i < iteraciones; i++) {
            // Simula la acción del botón que llena la tabla
            btnCrearTablaActionPerformed(null);

            try {
                // Extrae el valor de la fila 3, columna 1 
                Object valorObj = tablaEstadisticos.getValueAt(3, 1);
                if (valorObj != null) {
                    double costoTotal = Double.parseDouble(valorObj.toString());
                    valoresCostoTotal.add(costoTotal);
                }
            } catch (Exception e) {
                System.out.println("Error al obtener el Costo Total en iteración " + i + ": " + e.getMessage());
            }
        }

        // Crear dataset del histograma
        HistogramDataset dataset = new HistogramDataset();
        double[] dataArray = valoresCostoTotal.stream().mapToDouble(Double::doubleValue).toArray();
        dataset.addSeries("Costo Total", dataArray, 40); // 40 bins

        // Crear gráfico
        JFreeChart histograma = ChartFactory.createHistogram(
                "Costo Total", "Costo", "Frecuencia", dataset,
                PlotOrientation.VERTICAL, false, true, false);

        // Estilo opcional
        XYPlot plot = (XYPlot) histograma.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setDomainGridlinePaint(Color.GRAY);
        plot.setRangeGridlinePaint(Color.GRAY);

        // Mostrar gráfico en ventana
        ChartPanel panel = new ChartPanel(histograma);
        JFrame frame = new JFrame("Histograma de Costo Total");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.add(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_btnGraficarEjercico1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEjercicio1;
    private javax.swing.JButton btnCrearTabla;
    private javax.swing.JButton btnEjemplo;
    private javax.swing.JButton btnGenerador;
    private javax.swing.JButton btnGraficarEjercico1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaEstadisticos;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTextField textCantPedido;
    private javax.swing.JTextField textCostoMante;
    private javax.swing.JTextField textCostoPedido;
    private javax.swing.JTextField textCostoVentasPerd;
    private javax.swing.JTextField textInvInicial;
    private javax.swing.JTextField textPlazoEntrega;
    private javax.swing.JTextField textPuntoReorden;
    // End of variables declaration//GEN-END:variables
}
